#!/bin/bash

# Copyright (c) 2016, Peter Mrekaj. All Rights Reserved.
#
# Licensed under the MIT License, <LICENSE or http://opensource.org/licenses/MIT>.
# This file may not be copied, modified, or distributed except according to those terms.
#
# Pre-commit hook for GIT repositories that contain Golang source code.
# To use this hook, rename this file to "pre-commit", add it execution
# permission and copy it to the .git/hooks in your repository root.
#
# This pre-commit hook checks the following:
# - Are all filenames in ASCII
# - Are there no trailing whitespaces
# - Is gofmt installed
# - Are .go files correctly fromated
# - Is go installed
# - Are .go files correctly vetted
# - Is golint installed
# - Are .go files correctly lintered
#
# Use `git commit --no-verify` to skip the pre-commit hook.

RED='\033[0;31m'
GREEN='\033[0;32m'
NONE='\033[0m'

BOLD=$(tput bold)

INFO="${BOLD}PRECOMMIT:${NONE}"
SUCCESS="${GREEN}OK${NONE}"
FAILURE="${RED}FAILED${NONE}"

EXIT_CODE=0

TREE=$(git hash-object -t tree /dev/null) # An empty tree when initial commit.
if git rev-parse --verify HEAD &> /dev/null; then
    TREE=HEAD
fi

# Check if $1 == $2, then print the check result and return 0.
# If $1 != $2, then print the check result, set the EXIT_CODE=1 and return it.
# If $3 == true && $1 != $2, then do the same as in $1 != $2 case, plus exit
# with EXIT_CODE.
check () {
    local got=$1
    local want=$2
    local exit_on_failure=${3:-false}
    if [ "$got" == "$want" ]; then
        printf "${SUCCESS}\n"
        return 0
    fi
    printf "${FAILURE}\n"
    EXIT_CODE=1
    if [ $exit_on_failure == true ]; then
        exit ${EXIT_CODE}
    fi
    return 1
}

# Check if there are any files to examine.
if [ -z $(git diff --cached --name-only $TREE) ]; then
    exit ${EXIT_CODE}
fi

printf "${INFO} Checking that all filenames are in ASCII ... "
check $(git diff --cached --name-only -z $TREE | LC_ALL=C tr -d '[ -~]\0' | wc -c) 0

printf "${INFO} Checking for no trailing whitespaces ... "
check $(git diff-index --check --cached $TREE -- &> /dev/null) ""

# Check if there are any .go files to examine.
GO_FILES=$(git diff --cached --name-only $TREE | grep '.go$')
if [ -z "$GO_FILES" ]; then
    exit ${EXIT_CODE}
fi

printf "${INFO} Checking for gofmt ... "
command -v gofmt &> /dev/null
check $? 0 true

printf "${INFO} Checking formatting ... "
unformatted=$(gofmt -l $GO_FILES)
check $unformatted ""
if [ $? != 0 ]; then
    printf "${INFO} To fix formatting run:\n" >&2
    for file in $unformatted; do
        printf "gofmt -w $PWD/$file\n" >&2
    done
fi

printf "${INFO} Checking for go vet ... "
command -v go &> /dev/null
check $? 0 true

printf "${INFO} Vetting ... "
unvetted=$( { go tool vet $GO_FILES; } 2>&1 )
check $unvetted ""
if [ $? != 0 ]; then
    printf "${INFO} Fix the following vet issues :\n$unvetted\n" >&2
fi

printf "${INFO} Checking for golint ... "
command -v golint &> /dev/null
check $? 0 true

printf "${INFO} Lintering ... "
unlintered=$( { golint $GO_FILES; } 2>&1 )
check $unlintered ""
if [ $? != 0 ]; then
    printf "${INFO} Fix the following lint issues :\n$unlintered\n" >&2
fi

exit ${EXIT_CODE}
